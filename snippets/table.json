{
  "table": {
    "prefix": "lxtable",
    "body": [
      "import { dateRangeTransform } from '@/pages/CirculationSupervision/Management/components/utils';",
      "import { PageContainer } from '@ant-design/pro-layout';",
      "import type { ProColumns } from '@ant-design/pro-table';",
      "import ProTable from '@ant-design/pro-table';",
      "import { Link } from 'umi';",
      "",
      "// request请求数据",
      "const getList = async (params: any) => {",
      "\tconst { current, pageSize: size, ...searchParams } = params;",
      "\tconst listParams: any = {",
      "\t\tparam: { page: current - 1, size, ...searchParams },",
      "\t}; // 页码从0开始",
      "",
      "\ttry {",
      "\t\tconst { content, total } = { content: [], total: 0 }; // 这里写请求",
      "\t\treturn { success: true, data: content, total: total };",
      "\t} catch (err) {",
      "\t\t// 请求失败",
      "\t\tconsole.log(err);",
      "\t\treturn { success: false };",
      "\t}",
      "};",
      "",
      "// option列渲染",
      "const optionRender = (_: any, record: any) => {",
      "\tconst { id } = record;",
      "\tconst basePath = '/';",
      "",
      "\treturn [",
      "\t\t<Link key=\"detail\" to={`\\${basePath}/detail/\\${id}`}>",
      "\t\t\t查看",
      "\t\t</Link>,",
      "\t];",
      "};",
      "",
      "// 表格列定义",
      "const columns: ProColumns<any>[] = [",
      "\t{ title: 'ID', dataIndex: 'id', hideInSearch: true },",
      "\t{ title: '创建日期', dataIndex: 'createTime', valueType: 'date', hideInSearch: true },",
      "\t{",
      "\t\ttitle: '创建日期',",
      "\t\tdataIndex: 'createTime',",
      "\t\tvalueType: 'dateRange',",
      "\t\thideInTable: true,",
      "\t\tsearch: { transform: (value) => dateRangeTransform(value, 'createTimeS', 'createTimeE') },",
      "\t},",
      "\t{ title: '操作', valueType: 'option', render: optionRender },",
      "];",
      "",
      "const ${0:MyTable} = () => {",
      "\treturn (",
      "\t\t<PageContainer>",
      "\t\t\t<ProTable<any>",
      "\t\t\t\theaderTitle=\"列表\"",
      "\t\t\t\tcolumns={columns}",
      "\t\t\t\trowKey=\"id\"",
      "\t\t\t\trequest={getList}",
      "\t\t\t\tsearch={{ defaultCollapsed: false, labelWidth: 'auto' }}",
      "\t\t\t\tscroll={{ x: columns.length * 150 }}",
      "\t\t\t\tpagination={{ defaultPageSize: 10, showSizeChanger: true }}",
      "\t\t\t/>",
      "\t\t</PageContainer>",
      "\t);",
      "};",
      "",
      "export default ${0:MyTable};"
    ],
    "description": "pro-table template"
  },
  "tableadd": {
    "prefix": "lxtableadd",
    "body": [
      "import { dateRangeTransform } from '@/pages/CirculationSupervision/Management/components/utils';",
      "import { PlusOutlined } from '@ant-design/icons';",
      "import type { ActionType } from '@ant-design/pro-components';",
      "import { PageContainer } from '@ant-design/pro-layout';",
      "import type { ProColumns } from '@ant-design/pro-table';",
      "import ProTable from '@ant-design/pro-table';",
      "import { Button } from 'antd';",
      "import { useRef, useState } from 'react';",
      "import { Link } from 'umi';",
      "import AddModal from '../AddModal';",
      "",
      "// request请求数据",
      "const getList = async (params: any) => {",
      "\tconst { current, pageSize: size, ...searchParams } = params;",
      "\tconst listParams: any = {",
      "\t\tparam: { page: current - 1, size, ...searchParams },",
      "\t}; // 页码从0开始",
      "",
      "\ttry {",
      "\t\tconst { content, total } = { content: [], total: 0 }; // 这里写请求",
      "\t\treturn { success: true, data: content, total: total };",
      "\t} catch (err) {",
      "\t\t// 请求失败",
      "\t\tconsole.log(err);",
      "\t\treturn { success: false };",
      "\t}",
      "};",
      "",
      "const ${0:MyTable} = () => {",
      "\tconst [modalVisible, setModalVisible] = useState<boolean>(false); // Modal是否可见",
      "\tconst [curr, setCurr] = useState<any>(); // 当前操作的数据 (仅编辑时)",
      "",
      "\t// ProTable的ref",
      "\tconst ref = useRef<ActionType>();",
      "",
      "\t// 新增/编辑",
      "\tconst handleUpdate = async (record?: any) => {",
      "\t\t// 更新当前操作的数据",
      "\t\tif (record) {",
      "\t\t\tsetCurr(record);",
      "\t\t} else {",
      "\t\t\tsetCurr(undefined);",
      "\t\t}",
      "",
      "\t\t// 显示对话框",
      "\t\tsetModalVisible(true);",
      "\t};",
      "",
      "\t// option列渲染",
      "\tconst optionRender = (_: any, record: any) => {",
      "\t\tconst { id } = record;",
      "\t\tconst basePath = '/';",
      "",
      "\t\treturn [",
      "\t\t\t<Link key=\"detail\" to={`\\${basePath}/detail/\\${id}`}>",
      "\t\t\t\t查看",
      "\t\t\t</Link>,",
      "\t\t\t<a key=\"udpate\" onClick={() => handleUpdate(record)}>",
      "\t\t\t\t编辑",
      "\t\t\t</a>,",
      "\t\t];",
      "\t};",
      "",
      "\t// 表格列定义",
      "\tconst columns: ProColumns<any>[] = [",
      "\t\t{ title: 'ID', dataIndex: 'id' },",
      "\t\t{ title: '创建日期', dataIndex: 'createTime', valueType: 'date', hideInSearch: true },",
      "\t\t{",
      "\t\t\ttitle: '创建日期',",
      "\t\t\tdataIndex: 'createTime',",
      "\t\t\tvalueType: 'dateRange',",
      "\t\t\thideInTable: true,",
      "\t\t\tsearch: { transform: (value) => dateRangeTransform(value, 'createTimeS', 'createTimeE') },",
      "\t\t},",
      "\t\t{ title: '操作', valueType: 'option', render: optionRender },",
      "\t];",
      "",
      "\t// ToolBar中的新增按钮",
      "\tconst toolBarRender = () => [",
      "\t\t<Button key=\"new\" type=\"primary\" onClick={() => handleUpdate()}>",
      "\t\t\t<PlusOutlined />",
      "\t\t\t新增",
      "\t\t</Button>,",
      "\t];",
      "",
      "\treturn (",
      "\t\t<PageContainer>",
      "\t\t\t{/* 表格 */}",
      "\t\t\t<ProTable<any>",
      "\t\t\t\theaderTitle=\"列表\"",
      "\t\t\t\tcolumns={columns}",
      "\t\t\t\trowKey=\"id\"",
      "\t\t\t\tactionRef={ref}",
      "\t\t\t\trequest={getList}",
      "\t\t\t\tsearch={{ defaultCollapsed: false, labelWidth: 'auto' }}",
      "\t\t\t\tscroll={{ x: columns.length * 150 }}",
      "\t\t\t\tpagination={{ defaultPageSize: 10, showSizeChanger: true }}",
      "\t\t\t\ttoolBarRender={toolBarRender}",
      "\t\t\t/>",
      "",
      "\t\t\t{/* 新增/编辑 对话框 */}",
      "\t\t\t<AddModal",
      "\t\t\t\tcurr={curr}",
      "\t\t\t\tvisible={modalVisible}",
      "\t\t\t\tcancelModal={() => setModalVisible(false)}",
      "\t\t\t\treloadTable={() => ref.current?.reload()}",
      "\t\t\t/>",
      "\t\t</PageContainer>",
      "\t);",
      "};",
      "",
      "export default ${0:MyTable};"
    ],
    "description": "pro-table template (with add button)"
  },
  "addmodal": {
    "prefix": "lxaddmodal",
    "body": [
      "import { LXModal } from '@/components/rewrite';",
      "import FormInfo from '@/pages/ComputionAccess/components/FormInfo';",
      "import type { FormInfoItem } from '@/pages/ComputionAccess/components/types';",
      "import { DatePicker, Form, Input, message } from 'antd';",
      "import { useEffect, useState } from 'react';",
      "",
      "const { RangePicker } = DatePicker;",
      "const { TextArea } = Input;",
      "",
      "type Props = {",
      "\tcurr?: any; // 当前操作的数据, 如果为空, 则是新建",
      "\tvisible: boolean;",
      "\tcancelModal: () => void;",
      "\treloadTable: () => void; // 刷新表格",
      "};",
      "",
      "const itemData: FormInfoItem[] = [",
      "\t{ name: 'name', label: '名称', required: true },",
      "\t{",
      "\t\tname: 'createDate',",
      "\t\tlabel: '起止日期',",
      "\t\trequired: true,",
      "\t\tinnerNode: <RangePicker style={{ width: '100%' }} />,",
      "\t},",
      "\t{ name: 'description', label: '简介', innerNode: <TextArea /> },",
      "];",
      "",
      "const AddModal = (props: Props) => {",
      "\tconst { curr, visible, cancelModal, reloadTable } = props;",
      "\tconst [loading, setLoading] = useState<boolean>(false);",
      "",
      "\tconst isUpdate = curr !== undefined; // 编辑还是新建",
      "",
      "\tconst [form] = Form.useForm();",
      "",
      "\t// 清空Modal数据",
      "\tuseEffect(() => {",
      "\t\tform.resetFields();",
      "\t}, [form, visible]);",
      "",
      "\t// 点击`是`的回调",
      "\tconst handleOk = async () => {",
      "\t\tsetLoading(true);",
      "\t\ttry {",
      "\t\t\tconst values = await form.validateFields();",
      "\t\t\tconsole.log(values);",
      "",
      "\t\t\t// 发送请求",
      "\t\t\tmessage.success(`\\${isUpdate ? '编辑' : '新建'}成功`);",
      "",
      "\t\t\treloadTable(); // 刷新表格",
      "\t\t\tcancelModal(); // 关闭对话框",
      "\t\t} catch (err) {",
      "\t\t\tconsole.log(err);",
      "\t\t} finally {",
      "\t\t\tsetLoading(false);",
      "\t\t}",
      "\t};",
      "",
      "\treturn (",
      "\t\t<LXModal",
      "\t\t\tforceRender // 消除 Warning: Instance created by `useForm` is not connected to any Form element.",
      "\t\t\tvisible={visible}",
      "\t\t\ttitle={`${isUpdate ? '编辑' : '新建'}`}",
      "\t\t\tonCancel={cancelModal}",
      "\t\t\tconfirmLoading={loading}",
      "\t\t\tonOk={handleOk}",
      "\t\t>",
      "\t\t\t<FormInfo form={form} itemData={itemData} initialValues={curr} />",
      "\t\t</LXModal>",
      "\t);",
      "};",
      "",
      "export default AddModal;"
    ],
    "description": "add modal"
  },
  "detail": {
    "prefix": "lxdetail",
    "body": [
      "import DescriptionsInfo from '@/pages/CirculationSupervision/components/DescriptionsInfo';",
      "import type { DescItem } from '@/pages/CirculationSupervision/components/types';",
      "import { ProCard } from '@ant-design/pro-components';",
      "import { PageContainer } from '@ant-design/pro-layout';",
      "import { useEffect, useState } from 'react';",
      "import { history, useParams } from 'umi';",
      "",
      "// 返回到上一个界面",
      "const handleBack = () => history.goBack();",
      "",
      "// 通过Params传入`id`",
      "type Params = {",
      "\tid: string;",
      "};",
      "",
      "// Descriptions.Item内容",
      "const itemData: DescItem[] = [",
      "\t{ index: 'id', label: 'ID' },",
      "\t{ index: 'createTime', label: '创建日期', valueType: 'dateTime' },",
      "];",
      "",
      "const ${1:MyDetail} = () => {",
      "\tconst params = useParams<Params>();",
      "\tconst { id } = params;",
      "",
      "\t// 状态",
      "\tconst [example, setExample] = useState<any>();",
      "",
      "\t// 请求相关信息",
      "\tuseEffect(() => {",
      "\t\tif (id === undefined) return;",
      "",
      "\t\tconst queryInfo = async () => {",
      "\t\t\ttry {",
      "\t\t\t\tconst content = { id: '001', createTime: 1640966400000 };",
      "\t\t\t\t// 请求成功",
      "\t\t\t\tsetExample(content);",
      "\t\t\t} catch (err) {",
      "\t\t\t\tconsole.log(err);",
      "\t\t\t}",
      "\t\t};",
      "\t\tqueryInfo();",
      "\t}, [id]);",
      "",
      "\treturn (",
      "\t\t<PageContainer onBack={handleBack}>",
      "\t\t\t<ProCard title=\"信息\">",
      "\t\t\t\t<DescriptionsInfo itemData={itemData} obj={example} />",
      "\t\t\t</ProCard>",
      "\t\t</PageContainer>",
      "\t);",
      "};",
      "",
      "export default ${1:MyDetail};"
    ],
    "description": "detail template"
  }
}
